name: FastAPI CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Set up PostgreSQL service for testing
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "GEMINI_MODEL_NAME=gemini-1.5-flash" >> $GITHUB_ENV

      - name: Run database migrations (if you have any)
        run: |
          # Add your migration commands here if needed
          # python -m alembic upgrade head
          echo "Skipping migrations for now"

      - name: Run tests
        run: |
          # Install pytest if not in requirements.txt
          pip install pytest pytest-asyncio httpx
          # Run your tests
          pytest tests/ -v
        continue-on-error: true  # Remove this if you want tests to be mandatory

      - name: Start FastAPI server (for testing)
        run: |
          # Start server in background for integration tests
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10  # Wait for server to start
          
          # Test if server is running
          curl -f http://localhost:8000/ || echo "Server not responding"

      - name: Stop background processes
        run: |
          pkill -f uvicorn || true

  # Separate job for deployment (optional)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to Railway
        run: |
          echo "Deployment would happen here"
          # Add your Railway deployment commands
          # Or this could trigger Railway's automatic deployment
